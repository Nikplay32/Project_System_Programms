@page "/documentdetails/{DocumentID}"
@using RepairEquipment.Client.Services.Interfaces
@inject IDocumentDetailsService _data
@inject IEquipmentService _equipment
@inject IEquipmentHistoryService _equipmentHistory
@inject IUtilsService _utils
@inject IDialogService _dialogService
@inject IEquipmentHistoryService _history
@inject IDocumentStatusService _documentStatus
@inject ISnackbar Snackbar

    <MudPaper Square="true" Class="pa-4 d-flex flex-grow-1">

        <MudContainer Class="align-self-stretch" Style="text-align: left">
            <MudBreadcrumbs Items="@_items" Separator=">"></MudBreadcrumbs>
        </MudContainer>
        
        <MudContainer Style="text-align: right; padding-right: unset; margin-right: 15px">

            @* Сreate *@
            <MudButton @onclick="InsertDocumentDetails" StartIcon="@Icons.Material.Filled.Create" Variant="Variant.Filled" Color="Color.Success">CREATE</MudButton>      
            
            @* BackToDocument *@
            <MudToolTipIconButtonEx
                Icon="@Icons.Filled.KeyboardReturn"
                Text="Back"
                Href="/"/>    
                
        </MudContainer>
        
    </MudPaper>
    
    <MudTable Class="mud-fab-layout-content" @bind-SelectedItem="_selectedItem" Items="@DocumentDetails" Dense="@dense" Hover="@hover" Filter="new Func<DocumentDetailRecord, bool>(Filter)">
        <ToolBarContent>
            <MudTextField @bind-Value="searchString" Immediate="true" Placeholder="Search" Adornment="Adornment.Start"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" />
        </ToolBarContent>

        <HeaderContent>
            <MudTh>DocumentDateOut</MudTh>
            <MudTh>DocumentDateIn</MudTh>
            <MudTh>Quantity</MudTh>
            <MudTh>Equipment</MudTh>           
            <MudTh></MudTh>
        </HeaderContent>
        
        <RowTemplate>
            <MudTd @ondblclick="@(()=>UpdateDocumentDetails(@context.ID))" DataLabel="DocumentDateOut">@Convert.ToString(string.Format("{0:dd/MM/yyyy}", context.DocumentDateOut))</MudTd>
            <MudTd @ondblclick="@(()=>UpdateDocumentDetails(@context.ID))" DataLabel="DocumentDateIn">@Convert.ToString(string.Format("{0:dd/MM/yyyy}", context.DocumentDateIn))</MudTd>
            <MudTd @ondblclick="@(()=>UpdateDocumentDetails(@context.ID))" DataLabel="Quantity">@context.Quantity</MudTd>
            <MudTd @ondblclick="@(()=>UpdateDocumentDetails(@context.ID))" DataLabel="Equipment">@_utils.GetEquipmentNameById(@context.EquipmentID)</MudTd>            
            <MudTd @ondblclick="@(()=>UpdateDocumentDetails(@context.ID))" DataLabel="Status">@_utils.GetDocumentStatusNameById(@context.StatusID)</MudTd>
            <MudTd Style="text-align: right">
                
            <MudIconButton
                Class="hoverable-item top-0 right-0 mt-3 mr-4"
                Color="Color.Error"
                Variant="Variant.Filled"
                Icon="@Icons.Rounded.Delete"
                @onclick="@(()=>DeleteDocumentDetails(@context.ID))"/>   
                    
            </MudTd>
        </RowTemplate>

        <PagerContent>
            <MudTablePager />
        </PagerContent>
    </MudTable>    

    <div class="d-flex flex-wrap mt-4">
        <MudSwitch @bind-Checked="@hover" Color="Color.Primary">Hover</MudSwitch>
        <MudSwitch @bind-Checked="@dense" Color="Color.Secondary">Dense</MudSwitch>
    </div>



@code {
    private List<EquipmentRecord>? EquipmentList;
    private List<DocumentStatusRecord>? DocumentStatusList;
    private DocumentDetailRecord? _selectedItem;
    private string searchString = "";
    private bool hover = true;
    private bool dense = false;

    private List<BreadcrumbItem> _items = new List<BreadcrumbItem>
    {
        new BreadcrumbItem("Documents", href: "/"),
        new BreadcrumbItem("DocumentDetails", href: null, disabled: true)
    };

    public IEnumerable<DocumentDetailRecord>? DocumentDetails { get; set; }

    [Parameter]
    public string? DocumentID { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await GetDocumentsDetailsList();
        await GetEquipmentList();
        await GetDocumentStatusList();
    }

    private async Task GetDocumentsDetailsList() => DocumentDetails = await _data.GetDocumentDetailsAsync(Convert.ToInt32(DocumentID)).ConfigureAwait(false);

    private async Task GetEquipmentList() => EquipmentList = await _equipment.GetEquipmentListAsync().ConfigureAwait(false);

    private async Task GetDocumentStatusList() => DocumentStatusList = await _documentStatus.GetDocumentStatusListAsync().ConfigureAwait(false);

    private async Task InsertDocumentDetails()
    {
        var parameters = new DialogParameters();
        parameters.Add("DocumentDetails", new DocumentDetailRecord());
        parameters.Add("DocumentID", DocumentID);
        parameters.Add("EquipmentList", EquipmentList);
        parameters.Add("Status", DocumentStatusList);
        var dialog = _dialogService.Show<DocumentsDetailsDialog>("Create document details", parameters);
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            var document = result.Data as DocumentDetailRecord;

            await _data.InsertDocumentDetailAsync(document).ConfigureAwait(false);

            Snackbar.Add("Document details successfully added");
            await GetDocumentsDetailsList();
        }
    }
    
    private async Task UpdateDocumentDetails(int id)
    {
        var parameters = new DialogParameters();
        parameters.Add("DocumentDetails", _selectedItem);     
        parameters.Add("DocumentID", DocumentID);
        parameters.Add("EquipmentList", EquipmentList);
        parameters.Add("Status", DocumentStatusList);
        var dialog = _dialogService.Show<DocumentsDetailsDialog>("Edit document details", parameters);
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            await _data.UpdateDocumentDetailAsync(result.Data as DocumentDetailRecord).ConfigureAwait(false);
            Snackbar.Add("Document details successfully updated");
            await GetDocumentsDetailsList();
        }
    }
    
    private async Task DeleteDocumentDetails(int id)
    {
        var parameters = new DialogParameters();
        parameters.Add("ContentText", "Do you really want to delete this record? This process cannot be undone.");
        parameters.Add("ButtonText", "Delete");
        parameters.Add("Color", Color.Error);
        
        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

        var dialog = _dialogService.Show<DeleteConfirmation>("Delete", parameters, options);
        var result = await dialog.Result;
        if (!result.Cancelled) {
            DocumentDetailRecord? details = DocumentDetails.Where(x => x.ID == id).FirstOrDefault();
            await _data.DeleteDocumentDetailAsync(details).ConfigureAwait(false);
            Snackbar.Add("Document details successfully deleted");
            await GetDocumentsDetailsList();
        }
    }
    
    private bool Filter(DocumentDetailRecord document) 
    {
        if (string.IsNullOrWhiteSpace(searchString)) return true;
        if (document.DocumentDateOut.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase)) return true;
        if (document.DocumentDateIn.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase)) return true;
        if (document.Quantity.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase)) return true;
        if (_utils.GetEquipmentNameById(document.EquipmentID).Contains(searchString, StringComparison.OrdinalIgnoreCase)) return true;
        return false;
    }
    
}
